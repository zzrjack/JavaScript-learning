一、获取DOM对象
querySelector('css选择器') 获取第一个元素
querySelectorall('css选择器集合')  获取多个元素   伪数组
				  通过遍历的方式，获取里面的每一个dom对象

getElementById('id')      获取一个元素id为xxx
getElementByTagName('标签')	获取页面所有这个标签xxx
getElementByClassName('类名 ')	获取页面所有类名为xxx
二、设置/修改DOM元素内容
docume.write()  会被解析 只能在</body>前
对象.innerText属性      将文本内容添加更新到任意标签位置，但文本中的标签不会被解析
对象.innerHtml属性
对象.属性=值


className操作css
元素.className='类名'  容易覆盖
元素.classList.add('类名') 追加一个类
			 .remove('类名')	删除一个类
			 .toggle('类名')	切换一个类

三、设置修改表单属性
本质是将表单类型转换为文本框
获取：DOM对象.属性名
设置：DOM对象.属性名=新值
设置表单元素属性：
	添加就有，移除就没有，一律使用布尔值表示，如果为ture代表添加
	比如：disabled、checked、selected 
	例如，btn.disabled=false
四、定时器-间歇函数
开启定时器
	setInterval(函数,间隔时间)
let 变量名 = setInterval(函数，间隔时间)
关闭定时器
	clearInterval	

五、事件监听
  注意：
	事件类型要加引号
	函数是点击之后再去执行，每次点击都会执行一次
例如：
	let btn = document.querySelector('button')
	btn.addEventListener('click',function(){
		alert('被点击了')
	})
  让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称注册事件
语法：
	元素.addEventListener('事件'，要执行的函数)
三要素：
	事件源：dom元素被事件触发，需要获取dom元素
	事件：用什么方式触发，比如鼠标点击click、鼠标经过mouseover等
	事件调用的函数：要做什么事


六、事件类型
	鼠标事件：鼠标触发：
	click 点击
	mouseenter 鼠标经过
	mouseleave 鼠标离开
	
	焦点事件：表单获得光标
	focus 获得焦点
	blur 失去焦点

	键盘事件：键盘触发
	keydown 键盘按下触发
	keyup 键盘抬起触发
	
	文本事件：表单输入触发
	input 用户输入事件
七、高阶函数
	即函数的高级应用，JavaScript中函数可以被当成【值】来对待
  	
回调函数：
	如果将函数A作为参数传递给函数B时，我们称函数A为回调函数

八、环境对象
目标：能够分析判断函数运行再不同环境中this所指代的对象
环境对象指的是函数内部特殊的变量this，它代表这当前函数运行时所处的环境

【谁调用，this就是谁】判断this指向的粗略规则
直接调用函数，其实相当于是window.函数，所以this指代window

九、编程思想
排他思想

当前元素为A状态，其他元素为B状态
使用
1.干掉所有人
	使用for循环
2.复活它自己
	通过this或者下标找到自己或者对应的元素
	

节点操作
一、DOM节点
	DOM树里的每一个内容都称之为节点
节点类型：
	元素节点
		所有的标签
		html是根节点
	属性节点
		所有的属性比如href
	文本节点
		所有的文本
	其他
二、查找节点
	父节点查找（子元素.parentNode）
		parentNode属性
		返回最近一级的父节点找不到返回为null
	获取子节点（父元素.children）
	childNodes
	获取所有子节点，包括文本节点（空格，换行）、注释节点等
	children（重点）
		仅获得所有元素节点
		返回的还是一个伪数组
	兄弟关系查找
	1.下一个兄弟节点：nextElementSibling 属性

	2.上一个兄弟节点：previousElementSibling 属性
三、增加节点
	//创建一个新的元素节点
	document.createElement('标签名')
	//追加节点
	插入到父元素的最后一个子元素
		父元素.appendChild(要插入的元素)
	插入到父元素中某个子元素的前面
	父元素.insertBefore(要插入的元素，在哪个元素前面)
四、克隆节点（元素.cloneNode(布尔值)）
cloneNode会克隆出一个跟原标签一样的元素，括号内传入布尔值
	若为true，则代表克隆时会包含后代节点一起克隆
	若为false，则代表克隆时不包含后代节点
	默认为false
五、删除节点
父元素.removeChild(要删除的元素)
若不存在父子关系删除不成功
删除节点和隐藏节点（display:none）有区别的：隐藏节点还是存在的但是删除，则从html中删除节点



时间对象：用来表示时间的对象
作用：可以得到当前系统时间
实例化：
	在代码中发现了new关键字时，一般将这个操作称之为实例化
	创建一个时间对象并获取时间
		获得当前时间
		let date = new Date()
		获得指定时间
		let date = new Date('1949-10-01')
时间对象方法：
方法：						作用：
	getFullYear()			获取年份  四位年份
	getMonth()				获取月份	取值0~11
	getDate()				获取月份中的每一天	不同月份取值也不相同
	getDay()				获取星期	取值为0~6
	getHours()				获取小时	取值为0~23
	getMinutes()			获取分钟	取值为0~59
	getSeconds()			获取秒		取值为0~59
时间戳
从某个时间点开始到指定时间的总的毫秒数，一种特殊的计量时间的方式
获取：时间戳
	getTime()
		
		let date = new Date()
		console.log(date.getTime())
	+new Date()
		console.log(+new Date())

1.获取事件对象
	部分常用属性
		type：获取当前的事件类型
		clientX/clientY：获取光标相对于游览器可见窗口左上角的位置
		offsetX/offsetY:获取光标相对于当前DOM元素左上角的位置
		pageX/pageY：跟文档坐标有关
		key：
			用户按下的键盘键的值
			现在不提倡使用keyCode

2.事件流 默认false即冒泡阶段触发 若为ture则在捕获阶段触发
	指的是事件完整执行过程中的流动路径
	捕获阶段（父到子）->冒泡阶段（子到父）
事件冒泡概念：
	当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次触发。
	即依次向上调用所有父级元素的同名事件

阻止事件流动
因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素
若想把事件就限制在当前元素内，就需要阻止事件流动
阻止事件流动需要拿到事件对象
语法： 事件对象.stopPropagation()

鼠标经过事件：
	mouseover和mouseout会有冒泡效果
	mouseenter和mouseleave没有冒泡效果（推荐）

3.两种注册事件的区别
传统on注册（L0）
	同一个对象，后面注册的事件会覆盖前面注册（同一个事件）
	直接使用null覆盖就可以实现事件的解绑
	都是冒泡阶段执行的
事件监听注册（L2）
语法：addEventListener（事件类型，事件处理函数，是否使用捕获）
后面注册的事件不会覆盖前面注册的事件（同一个事件）
可以通过第三个参数去确定是在冒泡或者捕获阶段执行
必须使用removeEventListener(事件类型，事件处理函数，获取捕获或者冒泡阶段)
匿名函数无法被解绑

4.事件委托
优点：
	事件委托是给父级添加事件，而不是孩子添加事件（可以提高性能）
	利用事件冒泡的特点，给父元素添加事件，子元素可以触发
	事件对象.target   可以获得真正触发事件的元素



		

