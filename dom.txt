一、获取DOM对象
querySelector('css选择器') 获取第一个元素
querySelectorall('css选择器集合')  获取多个元素   伪数组
				  通过遍历的方式，获取里面的每一个dom对象

getElementById('id')      获取一个元素id为xxx
getElementByTagName('标签')	获取页面所有这个标签xxx
getElementByClassName('类名 ')	获取页面所有类名为xxx
二、设置/修改DOM元素内容
docume.write()  会被解析 只能在</body>前
对象.innerText属性      将文本内容添加更新到任意标签位置，但文本中的标签不会被解析
对象.innerHtml属性
对象.属性=值


className操作css
元素.className='类名'  容易覆盖
元素.classList.add('类名') 追加一个类
			 .remove('类名')	删除一个类
			 .toggle('类名')	切换一个类

三、设置修改表单属性
本质是将表单类型转换为文本框
获取：DOM对象.属性名
设置：DOM对象.属性名=新值
设置表单元素属性：
	添加就有，移除就没有，一律使用布尔值表示，如果为ture代表添加
	比如：disabled、checked、selected 
	例如，btn.disabled=false
四、定时器-间歇函数
开启定时器
	setInterval(函数,间隔时间)
let 变量名 = setInterval(函数，间隔时间)
关闭定时器
	clearInterval	

五、事件监听
  注意：
	事件类型要加引号
	函数是点击之后再去执行，每次点击都会执行一次
例如：
	let btn = document.querySelector('button')
	btn.addEventListener('click',function(){
		alert('被点击了')
	})
  让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称注册事件
语法：
	元素.addEventListener('事件'，要执行的函数)
三要素：
	事件源：dom元素被事件触发，需要获取dom元素
	事件：用什么方式触发，比如鼠标点击click、鼠标经过mouseover等
	事件调用的函数：要做什么事


六、事件类型
	鼠标事件：鼠标触发：
	click 点击
	mouseenter 鼠标经过
	mouseleave 鼠标离开
	
	焦点事件：表单获得光标
	focus 获得焦点
	blur 失去焦点

	键盘事件：键盘触发
	keydown 键盘按下触发
	keyup 键盘抬起触发
	
	文本事件：表单输入触发
	input 用户输入事件
七、高阶函数
	即函数的高级应用，JavaScript中函数可以被当成【值】来对待
  	
回调函数：
	如果将函数A作为参数传递给函数B时，我们称函数A为回调函数

八、环境对象
目标：能够分析判断函数运行再不同环境中this所指代的对象
环境对象指的是函数内部特殊的变量this，它代表这当前函数运行时所处的环境

【谁调用，this就是谁】判断this指向的粗略规则
直接调用函数，其实相当于是window.函数，所以this指代window

九、编程思想
排他思想

当前元素为A状态，其他元素为B状态
使用
1.干掉所有人
	使用for循环
2.复活它自己
	通过this或者下标找到自己或者对应的元素
	

节点操作
一、DOM节点
	DOM树里的每一个内容都称之为节点
节点类型：
	元素节点
		所有的标签
		html是根节点
	属性节点
		所有的属性比如href
	文本节点
		所有的文本
	其他
二、查找节点
	父节点查找（子元素.parentNode）
		parentNode属性
		返回最近一级的父节点找不到返回为null
	获取子节点（父元素.children）
	childNodes
	获取所有子节点，包括文本节点（空格，换行）、注释节点等
	children（重点）
		仅获得所有元素节点
		返回的还是一个伪数组
	兄弟关系查找
	1.下一个兄弟节点：nextElementSibling 属性

	2.上一个兄弟节点：previousElementSibling 属性
三、增加节点
	//创建一个新的元素节点
	document.createElement('标签名')
	//追加节点
	插入到父元素的最后一个子元素
		父元素.appendChild(要插入的元素)
	插入到父元素中某个子元素的前面
	父元素.insertBefore(要插入的元素，在哪个元素前面)
四、克隆节点


